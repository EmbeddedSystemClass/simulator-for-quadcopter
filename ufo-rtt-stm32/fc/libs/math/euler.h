/** * @file euler.h * @brief euler interface */#ifndef _EULER_H#define _EULER_H/** * @addtogroup ufo * @{ *//** * @addtogroup math * @{ *//** * @defgroup euler * euler math support * @{ */struct quat_t;/** * @struct euler_t euler.h * @brief Describe a rotational motion */typedef struct euler_t {    double pitch;   /**< pitch angle in degrees */    double roll;    /**< roll angle in degrees */    double yaw;     /**< yaw angle in degrees */} euler_t;/** * Convert euler to quaternion * * @param heading The yaw angle * @param attitude The pitch angle * @param bank * @param euler The pointer to euler structure * @param quat The pointer to the quaternion structure * @return None * @note \f[ w = c1 c2 c3 - s1 s2 s3             x = c1 c2 s3 + s1 s2 c3              y = s1 c2 c3 + c1 s2 s3             z = c1 s2 c3 - s1 c2 s3         \f] * where: \n * \f$ c1 = cos(heading / 2) \f$ * \f$ s1 = sin(heading / 2) \f$ * \f$ c2 = cos(attitude / 2) \f$ * \f$ s2 = sin(attitude / 2) \f$ * \f$ c3 = cos(bank / 2) \f$ * \f$ s3 = sin(bank / 2) \f$ * @sa quat2euler */void euler2quat(struct quat_t *quat, struct euler_t *euler);/** @} *//** @} *//** @} */#endif /* _EULER_H */