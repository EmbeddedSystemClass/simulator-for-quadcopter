/** * @file euler.h * @brief euler interface */#ifndef _EULER_H#define _EULER_H/** * @addtogroup ufo * @{ *//** * @addtogroup math * @{ *//** * @defgroup euler * euler math support * @{ */struct quat_t;/** * @struct euler_t euler.h * @brief Describe a rotational motion */typedef struct euler_t {    float phi;      /**< \f$ \phi \f$ */    float theta;    /**< \f$ \theta \f$ */    float psi;      /**< \f$ \psi \f$ */    float pitch;   /**< pitch angle in degrees */    float roll;    /**< roll angle in degrees */    float yaw;     /**< yaw angle in degrees */} euler_t;/** * Convert euler to quaternion, for details see page \ref euler * * @param euler The pointer to euler structure * @param quat The pointer to the quaternion structure * @return None * @note The unit of the angle is in radians * @sa quat2euler */void euler2quat(struct quat_t *quat, struct euler_t *euler);/** @} *//** @} *//** @} */#endif /* _EULER_H */